import os
import sys
import glob
import re

def show_exception_and_exit(exc_type, exc_value, tb):
    import traceback
    traceback.print_exception(exc_type, exc_value, tb)
    input("Press Enter key to exit.")
    sys.exit(-1)

def check_valid(infile):
    with open(infile,'r') as f:
        lines = f.readlines()[::-1]
        for line in lines:
            l = line.strip()
            if l == "": #blank lines
                next
            elif l[0] == "#": #comments
                next
            elif l[-3:] == "[X]": #ends in x
                return True
            else:
                return False

def getID(infile):
    id = False
    with open(infile,'r') as f:
        lines = f.readlines()
        for line in lines:
            matchobj = re.match("^#\s*(\w+)$",line.strip(),re.M|re.I) #match single word comments
            if matchobj:
                try:
                    id = int(matchobj.group(1),0)
                except:
                    next
                return id
      #if we got here, we didn't return anything so
        return None

def addDefinition(infile,output):
    global count
    textID = getID(infile)
    if not textID:
        textID = count
    count += 1
    file_label = os.path.splitext(os.path.basename(infile))[0].replace(' ','_')
    with open(output,'r') as f:
        existing_defs = ''.join(f.readlines())
    if ("#define " + file_label + "\t") not in existing_defs: #checks for existing definition.
        with open(output,'a') as f:
            f.write("#define " + file_label + "\t" + hex(textID) + "\n")

def addToData(infile,output):
    file_label = os.path.splitext(os.path.basename(infile))[0].replace(' ','_')
    with open(output,'a') as f:
        f.write(file_label + "_Data:\n")
        f.write('#incext ParseFile "'+ infile +'"\n')
        f.write("setText(" + file_label + "," + file_label + "_Data)\n\n")

def main():
    sys.excepthook = show_exception_and_exit

    textList = glob.glob('**/*.txt',recursive=True) #array of pathnames for all text files including subfolders.

    global count
    count = 0x903

    defpath = "Text Definitions.event"
    datapath = "Install Text Data.event"

    definitionsheader = """//Definitions generated by TextProcess.exe
#ifndef TEXT_DEFINITIONS
    #define TEXT_DEFINITIONS
#endif


"""

    dataheader = """//Data installer generated by TextProcess.exe

#include "Tools/Tool Helpers.txt"
#include "Text Definitions.event"


"""

    #create the three files if they don't already exist
    if os.path.exists(defpath) == False:
        with open(defpath,'w') as f:
            f.write(definitionsheader)
    with open(datapath,'w') as f:
        f.write(dataheader)
    validFile = False
    for fname in textList:
        #need to check if file ends in [X]
        validFile = check_valid(fname)
        if validFile:
            print("Adding " + fname + " to installer.")
            addDefinition(fname,defpath)
            addToData(fname,datapath)
        else:
            print("No [X] detected, skipping " + fname)
    print("Complete. Press Enter to continue.")
    input("Press Enter to continue")

if __name__ == '__main__':
  main()
